name: Build exe

on:
  push:
    branches:
      - master

permissions:
  contents: write  # This gives the workflow access to create releases
  
jobs:
  build:
    runs-on: ubuntu-latest  # GitHub Actions will run this job on an Ubuntu VM

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.22.4'  # Specify the Go version you are using

    - name: Build Windows executable
      run: |
        GOOS=windows GOARCH=amd64 go build -o push-${{github.run_number}}.exe
      # You can customize the output name or add additional build steps if needed
   # Upload the build artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: push-${{github.run_number}}.exe
        path: push-${{github.run_number}}.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Download the artifact from the build job
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: push-${{github.run_number}}.exe

      # Create a release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }} # Use the run number as the version
          release_name: "Release v${{ github.run_number }}"
          draft: false
          prerelease: false

      # Upload the .exe to the release
      - name: Upload .exe to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: push-${{github.run_number}}.exe
          asset_name: push-v${{ github.run_number }}.exe
          asset_content_type: application/octet-stream